1. Вывести фамилии студентов, у которых средний балл максимальный (используя ALL)
SELECT Фам FROM Студент INNER JOIN Успеваемость ON Студент.ИН_Студ = Успеваемость.ИН_Студ GROUP BY Фам HAVING MAX(Оценка) > ALL (SELECT AVG(Оценка) FROM Успеваемость)

2. Вывести название дисциплин, по которым сдавали наибольшее число экзаменов (не используя ALL)
SELECT Наименование FROM Успеваемость JOIN Дисциплина ON Успеваемость.ИН_Дисц = Дисциплина.ИН_Дисц GROUP BY Наименование HAVING COUNT(Успеваемость.ИН_Дисц) = (SELECT TOP 1 COUNT(*) FROM Успеваемость GROUP BY ИН_Дисц ORDER BY 1 DESC );

3. Вывести студентов, которые еще не сдавали экзамены
SELECT ИН_Студ, Фам FROM Студент WHERE ИН_Студ NOT IN (SELECT ИН_Студ FROM Успеваемость);
SELECT ИН_Студ, Фам FROM Студент WHERE NOT EXISTS (SELECT ИН_Студ FROM Успеваемость WHERE Успеваемость.ИН_Студ=Студент.ИН_Студ);
SELECT Студент.ИН_Студ, Фам FROM Студент LEFT JOIN Успеваемость ON Студент.ИН_Студ = Успеваемость.ИН_Студ WHERE Оценка IS NULL;

4. Вывести результаты экзаменов (все поля отношения Успеваемость) для студентов, которые являются консультантами.
SELECT * FROM Успеваемость WHERE EXISTS (SELECT * FROM Студент WHERE Студент.ИН_Студ = Успеваемость.ИН_Студ);

5. Создать таблицу Консультант(ИН_Студ, Фам, Адрес). Заполнить созданную таблицу студентами, которые являются консультантами.
CREATE TABLE Консультант(
	ИН_Студ INT PRIMARY KEY CONSTRAINT КонсультантСтудент FOREIGN KEY REFERENCES Студент(ИН_Студ),
	Фам VARCHAR(64) NOT NULL,
	Адрес VARCHAR(128)
);
INSERT INTO Консультант
SELECT ИН_Студ, Фам, Адрес FROM Студент WHERE EXISTS (SELECT * FROM Студент AS Студент2 WHERE Студент.ИН_Студ = Студент2.ИН_Студ);

6. Добавить в отношение Студент поле Ср_балл, которое будет предназначено для хранения информации о среднем балле студента. Заполните это поле на основе информации в БД.
ALTER TABLE Студент ADD Ср_балл DECIMAL;
UPDATE Студент SET Ср_балл = (SELECT AVG(Оценка) FROM Успеваемость WHERE Студент.ИН_Студ = Успеваемость.ИН_Студ GROUP BY Успеваемость.ИН_Студ);

7. Вывести номера студентов и их фамилии, которые консультируют наибольшее количество студентов
SELECT  Студент.Консультант, Студент2.Фам FROM Студент INNER JOIN Студент AS Студент2 ON Студент.Консультант = Студент2.ИН_Студ GROUP BY Студент.Консультант, Студент2.Фам HAVING COUNT(Студент.Консультант) >= ALL(SELECT COUNT(Консультант) FROM Студент GROUP BY Консультант);

8.Вывести номер студента, ФИО, количество экзаменов студента, а также количество экзаменов данного студента в семестре 1.
SELECT Студент.ИН_Студ, Фам, COUNT(Оценка) AS Всего_экзаменов, (SELECT COUNT(Оценка) FROM Успеваемость WHERE Семестр = 1 AND Студент.ИН_Студ = Успеваемость.ИН_Студ) AS Экзаменов_в_первом_семестре FROM Студент JOIN Успеваемость ON Студент.ИН_Студ  = Успеваемость.ИН_Студ GROUP BY Студент.ИН_Студ, Фам;

9.Вывести группу, количество студентов в группе, название деканата, количество студентов в каждом деканате. Выводить информацию, если количество студентов в группе менее 20.
SELECT ИН_Группа, (SELECT COUNT(*) FROM Студент WHERE ИН_Группа = Главная_Группа.ИН_Группа) AS Студентов_в_группе, Деканат, (SELECT COUNT(*) FROM Студент WHERE ИН_Группа IN (SELECT ИН_Группа FROM Группа WHERE Деканат = Главная_Группа.Деканат)) AS Студентов_в_деканате FROM Группа AS Главная_Группа WHERE (SELECT COUNT(*) FROM Студент WHERE ИН_Группа = Главная_Группа.ИН_Группа) > 20;

10.Вывести для каждой группы наилучший экзамен.
SELECT Группа,  ИН_Дисц FROM (SELECT Студент.ИН_Группа AS Группа, ИН_Дисц, AVG(Оценка) AS Средний_бал FROM Студент INNER JOIN Группа ON Студент.ИН_Группа = Группа.ИН_Группа INNER JOIN Успеваемость ON Студент.ИН_Студ = Успеваемость.ИН_Студ
GROUP BY Студент.ИН_Группа, ИН_Дисц) AS Table1 WHERE Средний_бал >= ALL(SELECT Средний_бал FROM (SELECT Студент.ИН_Группа AS Группа, ИН_Дисц, AVG(Оценка) AS Средний_бал FROM Студент INNER JOIN Группа ON Студент.ИН_Группа = Группа.ИН_Группа INNER JOIN Успеваемость ON Студент.ИН_Студ = Успеваемость.ИН_Студ
GROUP BY Студент.ИН_Группа, ИН_Дисц) AS Table2 WHERE Table1.Группа = Table2.Группа);

11.Найти информацию о двух лучших экзаменах для каждой группы (максимальный и следующий за ним). Выводить Ин_Студ, Фам, ИН_Группа, ИН_Дисц, Семестр, Оценка.
SELECT ИН_Студ, Фам, ИН_Группа, ИН_Дисц, Семестр, Оценка FROM (SELECT Успеваемость.ИН_Студ, Фам, ИН_Группа, ИН_Дисц, Семестр, Оценка, (ROW_NUMBER() OVER(PARTITION BY ИН_Группа ORDER BY Оценка DESC)) AS номер FROM Успеваемость INNER JOIN Студент ON Успеваемость.ИН_Студ = Студент.ИН_Студ) AS Table1 WHERE Номер <= 2;

12. Вывести номер студента со следующими пометками: 
• «что-то знает», если студент имеет оценки, находящиеся в диапазоне [60;74];
• «старается», если студент имеет оценки, находящиеся в диапазоне [75;89];
• «умничка», если студент имеет оценки, находящиеся в диапазоне [90;100];
SELECT DISTINCT Студент.ИН_Студ, CASE WHEN Оценка >= 90 THEN 'умничка' WHEN Оценка >= 75 THEN 'старается' WHEN Оценка >= 60 THEN 'что-то знает' END FROM Студент,Успеваемость WHERE Студент.ИН_Студ = Успеваемость.ИН_Студ;

13. Вывести номер студента со следующими пометками: 
• «что-то знает», если средняя оценка студента, находится в диапазоне [60;74];
• «старается», если средняя оценка студента, находится в диапазоне [75;89];
• «умничка», если средняя оценка студента, находится в диапазоне [90;100];
SELECT Студент.ИН_Студ, CASE WHEN AVG(Оценка) >= 90 THEN 'умничка' WHEN AVG(Оценка) >= 75 THEN 'старается' WHEN AVG(Оценка) >= 60 THEN 'что-то знает' END FROM Студент JOIN Успеваемость ON Студент.ИН_Студ = Успеваемость.ИН_Студ GROUP BY Студент.ИН_Студ;

14. Вывести количество каждого вида оценок с комментариями: «отличников», «хорошистов», «плохишей», отсортировать по комментариям.
SELECT Оценка, count(*), CASE WHEN Оценка >= 90 THEN 'отличников' WHEN Оценка >= 75 THEN 'хорошистов' WHEN Оценка >= 60 THEN 'плохишей' END FROM Успеваемость GROUP BY Оценка ORDER BY 3;


15. Подсчитать количество экзаменов с максимальной оценкой («отличников»), с минимальной оценкой («плохишей»), и всех остальных («середнячков»)
SELECT Пометка, COUNT(*) FROM (SELECT CASE WHEN Оценка = (SELECT MAX(Оценка) FROM Успеваемость) THEN 'отличников' WHEN Оценка = (SELECT MIN(Оценка) FROM Успеваемость) THEN 'плохишей' ELSE 'середнячков' END AS Пометка FROM Успеваемость) AS Table1 GROUP BY Пометка;

16. Вывести информацию в следующем виде: номер студента, фамилия, максимальная оценка, если студент является консультантом, либо пометку «не является консультантом».
SELECT Студент.ИН_Студ, Фам, CASE WHEN Студент.ИН_Студ IN(SELECT Консультант FROM Студент) THEN CONVERT(char, MAX(Оценка)) ELSE 'не является консультантом' END FROM Успеваемость, Студент WHERE Студент.ИН_Студ = Успеваемость.ИН_Студ GROUP BY Студент.ИН_Студ, Фам;

17. Отсортировать отношение Студент таким образом, чтобы первыми выводились студенты, которые являются консультантами, затем остальные.
SELECT *, CASE WHEN ИН_Студ IN (SELECT Консультант FROM Студент) THEN 1 ELSE 2 END AS Метка FROM Студент ORDER BY Метка;

18. Каждому студенту назначить статус:
консультант – не консультируемый;
консультант – консультируемый;
консультируемый – не консультант;
не консультант – не консультируемый.
SELECT *, CASE WHEN EXISTS (SELECT ИН_Студ FROM Студент WHERE ИН_Студ IN (SELECT Консультант FROM Студент) AND Консультант IS NULL AND Студент.ИН_Студ = Главный_студент.ИН_Студ ) THEN 'консультант – не консультируемый' WHEN EXISTS (SELECT ИН_Студ FROM Студент WHERE ИН_Студ IN (SELECT Консультант FROM Студент) AND Консультант IS NOT NULL AND Студент.ИН_Студ = Главный_студент.ИН_Студ ) THEN 'консультант – консультируемый' WHEN EXISTS (SELECT ИН_Студ FROM Студент WHERE ИН_Студ NOT IN (SELECT Консультант FROM Студент) AND Консультант IS NULL AND Студент.ИН_Студ = Главный_студент.ИН_Студ ) THEN 'не консультант – не консультируемый' ELSE 'консультируемый – не консультант' END FROM Студент AS Главный_студент;

19. Добавить в отношение Студент поле Кол_экз, которое будет предназначено для хранения информации о количестве сданных экзаменов. Занесите в это поле пометку «<=2», если количество сданных экзаменов менее 2; если их количество более 2, занесите количество сданных экзаменов; если экзаменов студент не сдавал вообще, занесите ему пометку «не сдавал»
ALTER TABLE Студент ADD Кол_экз VARCHAR(64);
UPDATE Студент SET Кол_экз = (SELECT CASE WHEN count(*) <= 2 THEN '<=2' WHEN count(*) > 2 THEN CONVERT(CHAR, COUNT(*)) ELSE 'не сдавал' END FROM Успеваемость WHERE Успеваемость.ИН_Студ = Студент.ИН_Студ);

20.Вывести студента, у которого средний балл максимальный.
SELECT TOP 1 ИН_Студ, AVG(Оценка) FROM Успеваемость GROUP BY ИН_Студ ORDER BY 2 DESC;

21. Вывести информацию о трех лучших экзаменах: номер студента, фамилию, номер дисциплины, семестр, оценку (по результатам экзаменов, т.е. вывести три строки с лучшими оценками)
SELECT TOP 3 Успеваемость.ИН_Студ, Оценка, Фам, ИН_Дисц, Семестр FROM Студент JOIN Успеваемость ON Студент.ИН_Студ = Успеваемость.ИН_Студ ORDER BY Оценка;

22. Вывести студентов, у которых три лучших средних балла.
SELECT TOP 3 Успеваемость.ИН_Студ, AVG(Оценка) FROM Успеваемость GROUP BY Успеваемость.ИН_Студ ORDER BY 2 DESC;

23. Выбрать случайным образом 2 строки из таблицы Успеваемость.
SELECT TOP 2 * FROM Успеваемость ORDER BY NEWID();

24. В одном запросе вывести ИН_Студ, ИН_Дисц, макс. оценку для каждого студ. по каждой дисц., для каждого студ. и макс. оценку среди всех экзаменов
SELECT ИН_Студ, ИН_Дисц, MAX(Оценка) FROM Успеваемость GROUP BY ROLLUP(ИН_Студ, ИН_Дисц);

25. * Добавить к предыдущему запросу еще и название дисциплины.
SELECT ИН_Студ, ИН_Дисц, (SELECT Наименование FROM Дисциплина WHERE Дисциплина.ИН_Дисц = Успеваемость.ИН_Дисц), MAX(Оценка) FROM Успеваемость GROUP BY ROLLUP(ИН_Студ,Успеваемость.ИН_Дисц);

26. В одном запросе вывести номер студента, номер дисциплины, максимальную оценку для каждого студента по каждой дисциплине, максимальную оценку для каждогостудента (максимальную оценку среди всех оценок НЕ ВЫВОДИТЬ).
SELECT ИН_Студ, ИН_Дисц, MAX(Оценка) FROM Успеваемость GROUP BY ИН_Студ, ROLLUP(ИН_Дисц);

27. В одном запросе вывести номер студента, номер дисциплины, максимальную оценку для каждого студента по каждой дисциплине, максимальную оценку по каждой дисциплине, максимальную оценку для каждого студента и максимальную оценку среди всех экзаменов (полный перебор групп).
SELECT ИН_Студ, ИН_Дисц, MAX(Оценка) FROM Успеваемость GROUP BY CUBE(ИН_Студ, ИН_Дисц);

28. В одном запросе подсчитать количество экзаменов для каждого студента, для каждой дисциплины. Вывести номер студента, номер дисциплины, количество экзаменов. 
SELECT ИН_Студ, ИН_Дисц, COUNT(*) FROM Успеваемость GROUP BY GROUPING SETS (ИН_Студ, ИН_Дисц);

29. В одном запросе подсчитать количество экзаменов для каждого студента в каждом семестре, для каждой дисциплины в каждом семестре, и общее количество экзаменов. Вывести номер студента, номер дисциплины, семестр, количество экзаменов. 
SELECT ИН_Студ, ИН_Дисц, Семестр, COUNT(*) AS Количество_экзаменов FROM Успеваемость GROUP BY GROUPING SETS ((ИН_Дисц, Семестр),(),(ИН_Студ, Семестр));

30. В одном запросе вывести номер студента, номер дисциплины, максимальную оценку для каждого студента по каждой дисциплине, максимальную оценку по каждой дисциплине, максимальную оценку для каждого студента и максимальную оценку среди всех экзаменов (эквивалентно запросу 13, отличается форма вывода).
SELECT ИН_Студ, ИН_Дисц, MAX(Оценка) OVER(PARTITION BY ИН_Студ, ИН_Дисц) AS Максимальная_студента_дисциплине, MAX(Оценка) OVER(PARTITION BY ИН_Студ) AS Максимальная_студента, MAX(Оценка) OVER(PARTITION BY ИН_Дисц) AS Максимальная_дисциплине, MAX(Оценка) OVER() AS Максимальня_всех FROM Успеваемость;

31. К результатам предыдущего запроса добавить вывод еще фамилии студентов 
SELECT Успеваемость.ИН_Студ, Фам, ИН_Дисц, MAX(Оценка) OVER(PARTITION BY Успеваемость.ИН_Студ, ИН_Дисц) AS Максимальная_студента_дисциплине, MAX(Оценка) OVER(PARTITION BY Успеваемость.ИН_Студ) AS Максимальная_студента, MAX(Оценка) OVER(PARTITION BY ИН_Дисц) AS Максимальная_дисциплине, MAX(Оценка) OVER() AS Максимальня_всех FROM Успеваемость JOIN Студент ON Успеваемость.ИН_Студ=Студент.ИН_Студ;

32. В одном запросе вывести номер студента, номер дисциплины, максимальную оценку для каждого студента по каждой дисциплине, среднюю оценку по каждой дисциплине, минимальную оценку для каждого студента.
SELECT ИН_Студ, ИН_Дисц, MAX(Оценка) OVER(PARTITION BY ИН_Студ,ИН_Дисц) AS Максимальная_студент_дисциплине, AVG(Оценка) OVER(PARTITION BY ИН_Дисц) AS Средняя_студент_дисциплине, MIN(Оценка) OVER(PARTITION BY ИН_Студ) AS Минимальная_студент FROM Успеваемость;

33. Подсчитать рейтинг студентов. Рейтинг высчитывается на основе среднего балла студентов всего университета.
SELECT Студент.ИН_Студ, Фам, ROW_NUMBER() OVER (ORDER BY AVG(Оценка) DESC) AS Рейтинг FROM Успеваемость INNER JOIN Студент ON Успеваемость.ИН_Студ = Студент.ИН_Студ GROUP BY Студент.ИН_Студ, Фам;

34. *Подсчитать рейтинг студентов в группе. Рейтинг высчитывается на основе среднего балла студентов только своей группы.
SELECT Успеваемость.ИН_Студ, Фам, ИН_Группа, ROW_NUMBER() OVER(PARTITION BY ИН_Группа ORDER BY AVG(Оценка) DESC) AS Рейтинг FROM Успеваемость INNER JOIN Студент ON Успеваемость.ИН_Студ = Студент.ИН_Студ GROUP BY Успеваемость.ИН_Студ, Фам, ИН_Группа;

35. * Найти информацию о двух лучших экзаменах для каждой группы. Выводить Ин_Студ, Фам, ИН_Группа, ИН_Дисц, Семестр, Оценка (эквивалентно запросу 5, но с применением функции ранжирования).
SELECT ИН_Студ, Фам, ИН_Группа, ИН_Дисц, Семестр, Оценка, Рейтинг FROM (SELECT Успеваемость.ИН_Студ, Фам, ИН_Группа, ИН_Дисц, Семестр, Оценка, ROW_NUMBER() OVER(PARTITION BY ИН_Группа ORDER BY Оценка DESC) AS Рейтинг FROM Успеваемость INNER JOIN Студент ON Успеваемость.ИН_Студ = Студент.ИН_Студ) AS Table1 WHERE Рейтинг <= 2;